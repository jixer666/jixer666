{"filename":"xuecheng-plus","category":"project","md":{"topSummary":"\r\ntitle: 学成在线项目笔记\r\ncategory: SpringBoot,SpringCloud,实战项目\r\ndate: 2024-08-18\r\nauthor: Jixer\r\nsource: 原创\r\n","mainContent":"\r\n\r\n此文章记录笔者在学成在线的过程中，所遇到的技术点和难点\r\n\r\n感谢黑马提供的课程和资源\r\n\r\n项目地址：[https://gitee.com/lijunxi666/xuecheng-plus-project](https://gitee.com/lijunxi666/xuecheng-plus-project)\r\n\r\n## 大文件上传\r\n\r\n此处的文件上传方法用于视频文件等大文件，若是图片这些，选用普通的上传即可\r\n\r\n本项目选用的是 minio 进行文件存储，当然其他的 oss 存储都是可以的，原理不变\r\n\r\nminio 项目地址：[https://github.com/minio/minio](https://github.com/minio/minio)\r\n\r\n### 流程\r\n\r\n1、前端通过一定手段，将一个大型的文件拆分成几个小的分片，依次上传\r\n\r\n2、在上传文件前，前端会对文件进行分片，并计算文件的 md5 值\r\n\r\n3、在初次上传前会对文件进行检查，检查该文件是否已经上传了，后端根据文件 md5 值这个唯一标识来查询数据库，若数据库存在，就说明该文件已经上传过了，无需上传，只需在数据库里添加一个记录就行；否则就没上传\r\n\r\n4、接着就是分片依次上传，同样的上传也是需要先检查该分片是否已经上传了（**断点续传作用**），若没上传就调用接口进行上传，已经上传了就检查下一个接口\r\n\r\n5、等所有分片全部上传完成，前端调用合并请求，将分片合并成一个整体并校验文件是否与上传一致，若校验通过就清理分片碎片文件，若没通过就抛错\r\n\r\n## 分布式任务调度\r\n\r\n本项目用的是 xxl-job 进行任务调度\r\n\r\nxxl-job 项目地址：[https://github.com/xuxueli/xxl-job](https://github.com/xuxueli/xxl-job)\r\n\r\n本项目采用分片广播的形式来处理视频转码、转码过程中服务宕机补偿、视频分片清理等任务\r\n\r\n分布式任务调度存在的问题：\r\n\r\n- 如何保证多个执行器不会查询到重复的任务呢？\r\n- 如果一个执行器在处理一个视频还没有完成，此时调度中心又一次请求调度，为了不重复处理同一个视频该怎么办？\r\n\r\n解决办法：\r\n\r\n- 采用分片广播，采用 `id % 分片总数 == 分片编号` 的方式来决定是哪一个执行器执行\r\n- 采用丢弃后续调度 + 乐观锁的方式\r\n\r\n### 视频转码\r\n\r\n对视频转码之前，采用乐观锁（更新转码字段状态）来判断当前任务是否已经执行了，防止多实例重复进行任务\r\n\r\n```sql\r\nupdate media_process set status = '4', execute_date = #{now} where id = #{taskId} and status in ('1', '3')\r\n```\r\n\r\n视频转码采用 ffmpeg 工具对 avi 视频转码为 mp4 文件，执行命令：\r\n\r\n```java\r\nffmpeg.exe -i lucene.avi -c:v libx264 -s 1280x720 -pix_fmt yuv420p -b:a 63k -b:v 753k -r 18 .\\lucene.mp4\r\n```\r\n\r\n先清除已经生成的转码文件，然后通过构建 ProcessBuilder 来执行命令\r\n\r\n```java\r\n// 清除以前已经生成的\r\nclearFile(savePath);\r\n// 获取执行命令\r\nList<String> commands = getCommands(filePath, savePath);\r\nString outString = \"error\";\r\ntry {\r\n    ProcessBuilder processBuilder = new ProcessBuilder();\r\n    processBuilder.command(commands);\r\n    Process process = processBuilder.start();\r\n} catch (Exception e){\r\n    log.error(\"执行视频转码命令出错，原因：{}\", e.getMessage());\r\n}\r\n```\r\n\r\n转码成功后，将文件保存到 minio 中，同时标记转码状态为已完成\r\n\r\n存在的问题：\r\n\r\n- 当一个任务调度在处理视频转码的时候，这个服务突然挂了，那么这个转码任务就一直处于转码中这个状态（已解决）\r\n- **任务失败一次次数就会加一，当达到最大失败次数的时候就说明这个视频有问题，需要人工处理（待解决）**\r\n- 上传一个文件进行分块上传，上传一半不传了，之前上传到 minio 的分块文件是否需要清理（已解决）\r\n\r\n### 视频转码补偿\r\n\r\n解决的问题：当一个任务调度在处理视频转码的时候，这个服务突然挂了，那么这个转码任务就一直处于转码中这个状态\r\n\r\n实现方法：通过分片广播的方式，对需要处理的视频文件进行重新执行视频转码\r\n\r\n如何找到需要处理的视频文件呢？项目通过查询数据库，根据状态为转码中和当前时间与执行时间比较超过2个小时这两个条件来筛选出需要重新执行的文件列表\r\n\r\n\r\n\r\n### 视频分片清理\r\n\r\n\r\n\r\n","title":" 学成在线项目笔记\r\n","category":[" SpringBoot","SpringCloud","实战项目\r\n"],"date":" 2024-08-18\r\n","author":" Jixer\r\n","source":" 原创\r\n"}}