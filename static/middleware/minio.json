{"filename":"minio","category":"middleware","md":{"topSummary":"\ntitle: SpringBoot整合Minio\ncategory: Minio,中间件\ndate: 2024-01-26\nauthor: Jixer\nsource: 原创\n\n","mainContent":"\n\n## 简介\n\n**MinIO** 是一个非常轻量的服务,可以很简单的和其他应用的结合使用，它兼容亚马逊 S3 云存储服务接口，非常适合于存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据和容器/虚拟机镜像等。\n\n## 安装\n\n采用docker拉取\n\n```bash\ndocker pull minio/minio\n```\n\n运行\n\n> 终端的端口在9001，java代码调用接口端口在9092\n\n```bash\ndocker run -d -p 9001:9000 -p 9092:9090 --name minio -e \"MINIO_ACCESS_KEY=minioadmin\" -e \"MINIO_SECRET_KEY=minioadmin\" -v /usr/bin/lijunxi/minio/data:/data -v /usr/bin/lijunxi/minio/config:/root/.minio minio/minio server /data --console-address \":9000\" -address \":9090\"\n```\n\n## 整合\n\n**引入jar包**\n\n```xml\n<minio-version>8.0.3</minio-version>\n<okhttp.version>4.8.1</okhttp.version>\n\n<dependency>\n    <groupId>io.minio</groupId>\n    <artifactId>minio</artifactId>\n    <version>${minio-version}</version>\n</dependency>\n<dependency>\n    <groupId>com.squareup.okhttp3</groupId>\n    <artifactId>okhttp</artifactId>\n    <version>${okhttp.version}</version>\n</dependency>\n```\n\n**yml配置文件**\n\n```yml\nminio:\n  endpoint: http://192.168.101.130:9092/  # minio的链接【需要用的Java连接端口】\n  accessKey: minioadmin # 默认账号\n  secretKey: minioadmin # 默认密码\n  bucket: xxxx\n```\n\n**minio配置类**\n\n用于进行minio配置，设置桶的链接对象\n\n```java\n@Configuration\npublic class MinioConfig {\n\n    @Value(\"${minio.endpoint}\")\n    private String endpoint;\n    @Value(\"${minio.accessKey}\")\n    private String accessKey;\n    @Value(\"${minio.secretKey}\")\n    private String secretKey;\n\n    @Bean\n    public MinioClient minioClient() {\n\n        MinioClient minioClient =\n                MinioClient.builder()\n                        .endpoint(endpoint)\n                        .credentials(accessKey, secretKey)\n                        .build();\n        return minioClient;\n    }\n}\n```\n\n### **上传文件**\n\n> localFilePath：本地文件路径\n> mimeType：文件的mineType\n> bucket：桶\n> objectName：需要上传到minio的文件名【可以自定义路径】\n\n```java\n@Autowired\nMinioClient minioClient;\n\n@Override\npublic boolean addFilesToMinIO(String localFilePath, String mimeType, String bucket, String objectName) {\n    try {\n        UploadObjectArgs testbucket = UploadObjectArgs.builder()\n                .bucket(bucket)\n                .object(objectName)\n                .filename(localFilePath)\n                .contentType(mimeType)\n                .build();\n        minioClient.uploadObject(testbucket);\n        log.debug(\"上传文件到minio成功,bucket:{},objectName:{}\", bucket, objectName);\n        return true;\n    } catch (Exception e) {\n        e.printStackTrace();\n        log.error(\"上传文件到minio出错,bucket:{},objectName:{},错误原因:{}\", bucket, objectName, e.getMessage(), e);\n        throw new KunKeException(\"上传文件到文件系统失败\");\n    }\n}\n```\n\n根据文件后缀获取mimeType\n\n```java\nprivate String getMimeType(String extension) {\n    if (extension == null)\n        extension = \"\";\n    // 根据扩展名取出mimeType\n    ContentInfo extensionMatch = ContentInfoUtil.findExtensionMatch(extension);\n    / /通用mimeType，字节流\n    String mimeType = MediaType.APPLICATION_OCTET_STREAM_VALUE;\n    if (extensionMatch != null) {\n        mimeType = extensionMatch.getMimeType();\n    }\n    return mimeType;\n}\n```\n\n### **下载文件**\n\n```java\n@Override\npublic File downloadFileFromMinIO(String bucket, String objectName) {\n    //临时文件\n    File minioFile = null;\n    FileOutputStream outputStream = null;\n    try {\n        InputStream stream = minioClient.getObject(GetObjectArgs.builder()\n                .bucket(bucket)\n                .object(objectName)\n                .build());\n        //创建临时文件\n        minioFile = File.createTempFile(\"minio\", \".merge\");\n        outputStream = new FileOutputStream(minioFile);\n        IOUtils.copy(stream, outputStream);\n        return minioFile;\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        if (outputStream != null) {\n            try {\n                outputStream.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}\n```\n\n### **删除文件**\n\n删除单个文件：`RemoveObjectArgs`\n\n```java\n@Test\npublic void test_delete() throws Exception {\n    // RemoveObjectArgs\n    RemoveObjectArgs removeObjectArgs = RemoveObjectArgs.builder().bucket(\"testbucket\").object(\"qq.jpg\").build();\t \n    // 删除文件\n    minioClient.removeObject(removeObjectArgs);\n}\n```\n\n批量删除文件：`RemoveObjectsArgs`\n\n```java\nprivate void clearChunkFiles(String chunkFileFolderPath, int chunkTotal) {\n\n    try {\n        List<DeleteObject> deleteObjects = Stream.iterate(0, i -> ++i)\n                .limit(chunkTotal)\n                .map(i -> new DeleteObject(chunkFileFolderPath.concat(Integer.toString(i))))\n                .collect(Collectors.toList());\n\n        RemoveObjectsArgs removeObjectsArgs = RemoveObjectsArgs.builder().bucket(bucket).objects(deleteObjects).build();\n        Iterable<Result<DeleteError>> results = minioClient.removeObjects(removeObjectsArgs);\n        results.forEach(r -> {\n            DeleteError deleteError = null;\n            try {\n                deleteError = r.get();\n\n            } catch (Exception e) {\n                e.printStackTrace();\n                log.error(\"清楚分块文件失败,objectname:{}\", deleteError.objectName(), e);\n            }\n        });\n    } catch (Exception e) {\n        e.printStackTrace();\n        log.error(\"清楚分块文件失败,chunkFileFolderPath:{}\", chunkFileFolderPath, e);\n    }\n}\n```\n\n### 访问\n\nMinio文件的访问都是通过yml配置中的 `endpoint + bucket + 自定义的objectName` 来进行访问\n\n例如我的一个图片访问路径：`http://192.168.101.130:9092/kunke/2024/01/25/36d7c1e3144c2feb8a10db7f561fbab6.png`\n\n- `http://192.168.101.130:9092`：endpoint\n\n- `kunke`：bucket\n\n- `2024/01/25/36d7c1e3144c2feb8a10db7f561fbab6.png`：自定义的文件路径【包含文件名】\n","title":" SpringBoot整合Minio\n","category":[" Minio","中间件\n"],"date":" 2024-01-26\n","author":" Jixer\n","source":" 原创\n\n"}}