[{"filename":"work-week-target","category":"life","md":{"topSummary":"\r\ntitle: 实习周目标\r\ncategory: 生活,实习\r\ndate: 2024-08-04\r\nauthor: Jixer\r\nsource: 原创\r\n\r\n","mainContent":"\r\n\r\n**写在之前的话：** 做事之前先思考，清楚需求的怎么来的，需要怎么解决，有没有更优的解决方法；思想最重要，技术是次要的\r\n\r\n## 第一周\r\n\r\n:calendar:：2024.7.29 ~ 2024.8.3\r\n\r\n本周是实习的第一周，没有制订周计划，所以就写下这周的总结\r\n\r\n第一天：获取了公司的相关账号，配置了后端所用到的环境\r\n\r\n第二天：从师傅得知项目需要用到 es，这天学了下 es 的用法\r\n\r\n第三天：看了雅典娜的知识库，大致了解了 v4 项目的架构，看了本地电脑上的 SaaS 项目代码的架构\r\n\r\n第四天：获得了 git 权限，拉取了本组代码，前后端联调启动（莫名其妙的问题太多了）\r\n\r\n第五天：学习了 DDD 领域架构设计，开了一下午的 OD 集训会（大型社死现场）\r\n\r\n总的来说这一周体验还是很棒的，师傅对我是放养的，公司有专门的考核机制，师傅对我设置的考核很低，非常友好\r\n\r\n## 第二周\r\n\r\n:calendar:：2024.8.5 ~ 2024.8.9\r\n\r\n目标：\r\n\r\n- 进一步学习 DDD 领域架构，熟悉项目代码结构\r\n- 空余时间学习微服务项目\r\n- 若有安排任务，积极响应并认真做好，并确保 Bug 率不要超过10%\r\n- 学习 jira 的使用\r\n- 请教师傅，了解并熟悉项目组的业务\r\n\r\n总结：\r\n\r\n第一天：学习了 Jira 的使用，调试并熟悉了登录接口\r\n\r\n第二天：熟悉了 v3 项目的模块和开发规范，微服务项目的分片上传和合并\r\n\r\n第三天：保险单导出 PDF 的功能，实现了 HEALTH 模板的数据的渲染\r\n\r\n第四天：继续实现了其他 HEALTH、VO 的模板渲染，卡在了 EDU 模板。在 Jira 上进行了第一次提交\r\n\r\n第五天：实现了 EDU 模板的渲染\r\n\r\n这周接到了第一个需求，对保险单导出 PDF 这个功能，对项目的结构进一步熟悉了，知道了启动的流程，对一些脚本文件是怎么使用的，很多地方都需要启动的时候执行脚本文件。除了业务上，我对 IDEA 工具的调试也更加熟练了。\r\n\r\n## 第三周\r\n\r\n:calendar:：2024.8.12 ~ 2024.8.17\r\n\r\n目标：\r\n\r\n- 制作基于 md 文件的静态博客生成器\r\n- 完善 mt 给的导出 PDF 任务\r\n- 继续微服务项目跟进\r\n\r\n总结：\r\n\r\n第一天：拉取了另一个项目组的代码，根据他的 prime 代码进行迁移到我的项目组来；开展了保密安全的会议\r\n\r\n第二天：完成 prime 项目最后一个模板的渲染，调试项目 bug，理解流程\r\n","title":" 实习周目标\r\n","category":[" 生活","实习\r\n"],"date":" 2024-08-04\r\n","author":" Jixer\r\n","source":" 原创\r\n\r\n"},"simpleMd":"\r\n\r\n写在之前的话： 做事之前先思考，清楚需求的怎么来的，需要怎么解决，有没有更优的解决方法；思想最重要，技术是次要的\r\n\r\n 第一周\r\n\r\n:calendar:：2024.7.29  2024.8.3\r\n\r\n本周是实习的第一周，没有制订周计划，所以就写下这周的总结\r\n\r\n第一天：获取了公司的相关账号，配置了后端所用到的环境\r\n\r\n第二天：从师傅得知项目需要用到 es，这天学了下 es 的用法\r\n\r\n第三天：看了雅典娜的知识库，大致了解了 v4 项目的架构，看了本地电脑上的 SaaS 项目代码的架构\r\n\r\n第四天：获得了 git 权限，拉取了本组代码，前后端联调启动（莫名其妙的问题太多了）\r\n\r\n第五天：学习了 DDD 领域架构设计，开了一下午的 OD 集训会（大型社死现场）\r\n\r\n总的来说这一周体验还是很棒的，师傅对我是放养的，公司有专门的考核机制，师傅对我设置的考核很低，非常友好\r\n\r\n 第二周\r\n\r\n:calendar:：2024.8.5  2024.8.9\r\n\r\n目标：\r\n\r\n 进一步学习 DDD 领域架构，熟悉项目代码结构\r\n 空余时间学习微服务项目\r\n 若有安排任务，积极响应并认真做好，并确保 Bug 率不要超过10%\r\n 学习 jira 的使用\r\n 请教师傅，了解并熟悉项目组的业务\r\n\r\n总结：\r\n\r\n第一天：学习了 Jira 的使用，调试并熟悉了登录接口\r\n\r\n第二天：熟悉了 v3 项目的模块和开发规范，微服务项目的分片上传和合并\r\n\r\n第三天：保险单导出 PDF 的功能，实现了 HEALTH 模板的数据的渲染\r\n\r\n第四天：继续实现了其他 HEALTH、VO 的模板渲染，卡在了 EDU 模板。在 Jira 上进行了第一次提交\r\n\r\n第五天：实现了 EDU 模板的渲染\r\n\r\n这周接到了第一个需求，对保险单导出 PDF 这个功能，对项目的结构进一步熟悉了，知道了启动的流程，对一些脚本文件是怎么使用的，很多地方都需要启动的时候执行脚本文件。除了业务上，我对 IDEA 工具的调试也更加熟练了。\r\n\r\n 第三周\r\n\r\n:calendar:：2024.8.12  2024.8.17\r\n\r\n目标：\r\n\r\n 制作基于 md 文件的静态博客生成器\r\n 完善 mt 给的导出 PDF 任务\r\n 继续微服务项目跟进\r\n\r\n总结：\r\n\r\n第一天：拉取了另一个项目组的代码，根据他的 prime 代码进行迁移到我的项目组来；开展了保密安全的会议\r\n\r\n第二天：完成 prime 项目最后一个模板的渲染，调试项目 bug，理解流程\r\n"},{"filename":"first-interview","category":"life","md":{"topSummary":"\r\ntitle: 双非菜鸟的第一次面试\r\ncategory: 生活,面试\r\ndate: 2024-07-02\r\nauthor: Jixer\r\nsource: 原创\r\n\r\n","mainContent":"\r\n\r\n## 开篇\r\n\r\n职位：Java 开发实习生\r\n\r\n起因是经过学长介绍一家成都的小公司，我想的是既然是学长介绍的，那么我还是有可能面上的（虽然是第一次面试）。但因为是线下面试，距离较远（需要来回做火车和住宿），所以我得思考下才能答复学长是否能够去\r\n\r\n后面我询问了父母和朋友的意见，决定还是去面试，毕竟机会是留给有准备的人的，而且现在大环境也不好，难得有面试\r\n\r\n## 准备\r\n\r\n在牛客上我找到了一篇关于该公司的笔试题目，后面会给出笔试题\r\n\r\n> PS：这与我当时的笔试是一样的，算是一个小意外吧\r\n\r\n然后我根据我写的简历又重新背一遍八股，讲项目的那些技术都看了一下，不是说很熟悉，至少能够说个大概\r\n\r\n接着每天就在牛客上看面经，遇到不会的都会记录下来\r\n\r\n## 出发去成都\r\n\r\n我是提前一天的去的，当天坐智轨到了高铁站，花了一将近一个小时，然后根据身份证进站，坐车到成都，又花了一个半小时\r\n\r\n到了成都，因为我是第一次到成都，所以我的第一反应就是成都真大啊，我这种土狗难得看到这种高楼建筑\r\n\r\n接着我就在腾讯地图上找附近的酒店，打算住一晚上，第二天是10点面试，所以怕来不及。最后反反复复查找，最终选了一个便宜的民宿，20多块一晚上，还要啥自信车，哈哈哈\r\n\r\n在民宿我也复习了一遍八股，把面试官可能问我的问题猜了个遍\r\n\r\n## 面试\r\n\r\n当天我很早就起床了，大概7点左右，然后坐地铁，公交车，到达了公司门口，这时候大概8点半左右，因为是9点开始上班的，所以我在门口又等了一会（背了下八股），大概9点20左右我就进去面试了\r\n\r\n面试的前台小姐先是让我签到，然后就给了我一张面试题（和牛客上看到的是一样的）和一张个人信息表让我填，这里居然手机都没收，直接然我去个地方写，真不怕我百度搜啊！\r\n\r\n写完后就去三楼面试了，面试官就和聊天，没问技术相关的问题，这时候我就发现不对劲了，感觉像 kpi 面，有一个问题印象比较深刻：说说你关于线上和线下面试的看法\r\n\r\n接着面试官因为要开会，所以就让一位正在工作的研发同事问我，我感觉那位研发同事估计也是第一面试不太会问，所以就随便提出来一两个问题就结束了，没有问八股\r\n\r\n之后那个开始面试我的那个人说：不管录没录取都会给我发消息，一周之内给我答复\r\n\r\n笔试 + 面试全程大概2个小时\r\n\r\n接着我就打车回航了，和来的时候一样，坐地铁到高铁站，坐智轨回学校\r\n\r\n## 附笔试题\r\n\r\n### collection与collections的区别，以及一些常用类\r\n\r\nCollection 是集合接口，很多我们熟悉的比如 List、Set、Queue 都是实现的这个接口；Collections 是集合的工具类，包含很多对集合操作的方法，比如：求集合的最大和最小值、排序等。\r\n\r\n常用类：\r\n\r\nCollection:\r\n\r\n- List：ArryList、LinkList\r\n- Set：HashSet\r\n- Queue：LinkQueue\r\n\r\nCollections：\r\n\r\n- sort();\r\n- max()和min()\r\n- reverse()\r\n\r\n### 字符串与数组的切片、分割、获取字串等相关类与方法\r\n\r\n字符串：\r\n\r\n- 切片：substring(int begin, int end);\r\n- 分割：split(String str, int limit)\r\n- 获取某个字符：charAt(int index)，indexOf(string str)，lastIndexOf(String str);\r\n\r\n数组：\r\n\r\n- 切片： Arrays.copyOfRange(int []arry, int begin, int end)\r\n- 分割：循环遍历\r\n\r\nJava反射机制的原理与使用场景\r\n\r\n原理：核心类是 Class 类，通过获取 Class 类就可以对类进行操作，比如：调用类的某个方法、获取类的某个属性等\r\n\r\n应用场景：\r\n\r\n1、广泛运用在框架中，比如：在Spring框架中，通过Spring AOP可以实现日记录等\r\n\r\n### HTTP中的GET请求和POST请求的区别\r\n\r\nGET\r\n\r\n- 请求参数能够看见且在url后面\r\n- 数据没有加密，不安全\r\n- 适合用来获取数据\r\n\r\nPOST:\r\n\r\n- 请求参数不可见，参数在请求体中\r\n- 数据加密，安全\r\n- 适合用来保存、更新数据\r\n\r\n### 大型文件上传过程涉及到分片上传，大致思路\r\n\r\n前端将文件分为多个小片，前端根据文件生成文件的MD5值，按照分片的顺序依次上传，上传的时候需要带上分片的总数、当前分片的序号、分片的文件\r\n\r\n后端收到分片文件后，对分片的序号进行标识缓存，若当前已经上传了就不用保存，否则就保存到一个临时文件目录；等所有分片文件全部上传完成后，就进行合并，合并后需要检验合并后的MD5值是否与之前文件的MD5值是否一致，若不一致就说明上传有误，若一致，就保存到Minio或者阿里云OSS中，最后就是清除文件临时文件\r\n\r\n### 数据结构中常用的排序算法\r\n\r\n冒泡排序、归并排序、选择排序、快速排序\r\n\r\n```\r\nvoid fun(int[] num, int i, int j){\r\n\tif(i >= j) return;\r\n\tint l = i - 1, r = j + 1, mid = num[i + j >> 1];\r\n\twhile(l < r){\r\n\t\tdo l ++; while(num[l] < mid);\r\n\t\tdo r --; while(num[r] > mid);\r\n\t\tif(l < r){\r\n\t\t\tint a = num[r];\r\n\t\t\tnum[r] = num[l];\r\n\t\t\tnum[l] = a;\r\n\t\t}\r\n\t}\r\n\tfun(num, i, r);\r\n\tfun(num, r + 1, j);\r\n}\r\n\r\nfun(num, 0, len - 1);\r\n```\r\n\r\n## 后续\r\n\r\n无，什么消息都没发","title":" 双非菜鸟的第一次面试\r\n","category":[" 生活","面试\r\n"],"date":" 2024-07-02\r\n","author":" Jixer\r\n","source":" 原创\r\n\r\n"},"simpleMd":"\r\n\r\n 开篇\r\n\r\n职位：Java 开发实习生\r\n\r\n起因是经过学长介绍一家成都的小公司，我想的是既然是学长介绍的，那么我还是有可能面上的（虽然是第一次面试）。但因为是线下面试，距离较远（需要来回做火车和住宿），所以我得思考下才能答复学长是否能够去\r\n\r\n后面我询问了父母和朋友的意见，决定还是去面试，毕竟机会是留给有准备的人的，而且现在大环境也不好，难得有面试\r\n\r\n 准备\r\n\r\n在牛客上我找到了一篇关于该公司的笔试题目，后面会给出笔试题\r\n\r\n PS：这与我当时的笔试是一样的，算是一个小意外吧\r\n\r\n然后我根据我写的简历又重新背一遍八股，讲项目的那些技术都看了一下，不是说很熟悉，至少能够说个大概\r\n\r\n接着每天就在牛客上看面经，遇到不会的都会记录下来\r\n\r\n 出发去成都\r\n\r\n我是提前一天的去的，当天坐智轨到了高铁站，花了一将近一个小时，然后根据身份证进站，坐车到成都，又花了一个半小时\r\n\r\n到了成都，因为我是第一次到成都，所以我的第一反应就是成都真大啊，我这种土狗难得看到这种高楼建筑\r\n\r\n接着我就在腾讯地图上找附近的酒店，打算住一晚上，第二天是10点面试，所以怕来不及。最后反反复复查找，最终选了一个便宜的民宿，20多块一晚上，还要啥自信车，哈哈哈\r\n\r\n在民宿我也复习了一遍八股，把面试官可能问我的问题猜了个遍\r\n\r\n 面试\r\n\r\n当天我很早就起床了，大概7点左右，然后坐地铁，公交车，到达了公司门口，这时候大概8点半左右，因为是9点开始上班的，所以我在门口又等了一会（背了下八股），大概9点20左右我就进去面试了\r\n\r\n面试的前台小姐先是让我签到，然后就给了我一张面试题（和牛客上看到的是一样的）和一张个人信息表让我填，这里居然手机都没收，直接然我去个地方写，真不怕我百度搜啊！\r\n\r\n写完后就去三楼面试了，面试官就和聊天，没问技术相关的问题，这时候我就发现不对劲了，感觉像 kpi 面，有一个问题印象比较深刻：说说你关于线上和线下面试的看法\r\n\r\n接着面试官因为要开会，所以就让一位正在工作的研发同事问我，我感觉那位研发同事估计也是第一面试不太会问，所以就随便提出来一两个问题就结束了，没有问八股\r\n\r\n之后那个开始面试我的那个人说：不管录没录取都会给我发消息，一周之内给我答复\r\n\r\n笔试 + 面试全程大概2个小时\r\n\r\n接着我就打车回航了，和来的时候一样，坐地铁到高铁站，坐智轨回学校\r\n\r\n 附笔试题\r\n\r\n collection与collections的区别，以及一些常用类\r\n\r\nCollection 是集合接口，很多我们熟悉的比如 List、Set、Queue 都是实现的这个接口；Collections 是集合的工具类，包含很多对集合操作的方法，比如：求集合的最大和最小值、排序等。\r\n\r\n常用类：\r\n\r\nCollection:\r\n\r\n List：ArryList、LinkList\r\n Set：HashSet\r\n Queue：LinkQueue\r\n\r\nCollections：\r\n\r\n sort;\r\n max和min\r\n reverse\r\n\r\n 字符串与数组的切片、分割、获取字串等相关类与方法\r\n\r\n字符串：\r\n\r\n 切片：substringint begin, int end;\r\n 分割：splitString str, int limit\r\n 获取某个字符：charAtint index，indexOfstring str，lastIndexOfString str;\r\n\r\n数组：\r\n\r\n 切片： Arrays.copyOfRangeint arry, int begin, int end\r\n 分割：循环遍历\r\n\r\nJava反射机制的原理与使用场景\r\n\r\n原理：核心类是 Class 类，通过获取 Class 类就可以对类进行操作，比如：调用类的某个方法、获取类的某个属性等\r\n\r\n应用场景：\r\n\r\n1、广泛运用在框架中，比如：在Spring框架中，通过Spring AOP可以实现日记录等\r\n\r\n HTTP中的GET请求和POST请求的区别\r\n\r\nGET\r\n\r\n 请求参数能够看见且在url后面\r\n 数据没有加密，不安全\r\n 适合用来获取数据\r\n\r\nPOST:\r\n\r\n 请求参数不可见，参数在请求体中\r\n 数据加密，安全\r\n 适合用来保存、更新数据\r\n\r\n 大型文件上传过程涉及到分片上传，大致思路\r\n\r\n前端将文件分为多个小片，前端根据文件生成文件的MD5值，按照分片的顺序依次上传，上传的时候需要带上分片的总数、当前分片的序号、分片的文件\r\n\r\n后端收到分片文件后，对分片的序号进行标识缓存，若当前已经上传了就不用保存，否则就保存到一个临时文件目录；等所有分片文件全部上传完成后，就进行合并，合并后需要检验合并后的MD5值是否与之前文件的MD5值是否一致，若不一致就说明上传有误，若一致，就保存到Minio或者阿里云OSS中，最后就是清除文件临时文件\r\n\r\n 数据结构中常用的排序算法\r\n\r\n冒泡排序、归并排序、选择排序、快速排序\r\n\r\n\r\nvoid funint num, int i, int j{\r\n\tifi = j return;\r\n\tint l = i  1, r = j + 1, mid = numi + j  1;\r\n\twhilel < r{\r\n\t\tdo l ++; whilenuml < mid;\r\n\t\tdo r ; whilenumr  mid;\r\n\t\tifl < r{\r\n\t\t\tint a = numr;\r\n\t\t\tnumr = numl;\r\n\t\t\tnuml = a;\r\n\t\t}\r\n\t}\r\n\tfunnum, i, r;\r\n\tfunnum, r + 1, j;\r\n}\r\n\r\nfunnum, 0, len  1;\r\n\r\n\r\n 后续\r\n\r\n无，什么消息都没发"}]