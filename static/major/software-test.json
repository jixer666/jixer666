{"filename":"software-test","category":"major","md":{"topSummary":"\ntitle: 软件测试资料\ncategory: 软件工程\ndate: 2024-05-07\nauthor: Jixer\nsource: 原创\n\n","mainContent":"\n\n## 1.软件测试层次（P10）\n\n- **单元测试**：包括代码评审（静态测试）和运行单元程序进行测试（动态测试）。单元测试一 般由开发人员完成。\n- **集成测试**：也称组装测试、联合测试、子系统测试，在单元测试的基础上，将模块按照设 计要求组装起来同时进行测试，主要目标是发现与接口有关的模块之间问题。\n- **系统测试**：是将软件放在整个计算机环境下，包括软硬件平台、某些支持软件、数据和人 员等，在实际运行环境下进行一系列的测试，包括恢复测试、安全测试、强度测试和性能 测试等。\n- **验收测试**：是指在软件产品完成了系统测试之后、产品发布之前所进行的软件测试活动。 它是技术测试的最后一个阶段，也称为交付测试，确保所开发的软件产品是否符合用户预 期的各项要求。验收测试的重要特征就是用户参与。\n\n## 2.软件测试中的评审包括（P19）\n\n- 技术评审\n- 文档评审\n\n> 补充两个：管理评审、流程评审\n\n## 3.评审方法（P20）\n\n方法从上到下逐渐正式\n\n- 临时评审（最不正式）\n- 轮查：邮件分发审查的方法，通过邮件将评审的内容分发下去，然后再收集大家的反馈意见\n- 互为复审（同行评审）：一对一相互审查\n- 走查（应用最广泛）：评审的对象从头到尾检查一遍。\n- 会议审查（最正式）\n\n## 4.软件测试中，修正一个错误的代价（P26）\n\n要修正问题，必须重新设计、重新编程和重新测试，代价是不是很大？问题发现得越迟，要重做的事情就会越多，返工量就越大。也就是说，缺陷发现或解决得越迟，其带来的成本就越大。\n\n## 5.用户故事要素（P30）\n\n三个要素\n\n- 角色：谁要使用这个功能，即确定最终用户角色\n- 活动：需要完成什么样的功能\n- 商业价值：为什么需要这个功能，这个功能带来什么样的价值\n\n> 用户故事通常按如下格式来表达：\n> 作为一个<角色>，我想要<做什么、活动>，以便达到<什么目的、商业价值>\n\n## 6.修复软件缺陷费用（P26）\n\n![](https://img2.imgtp.com/2024/05/12/H7X03NE2.png)\n\n## 7.静态测试，动态测试（P9）\n\n- 动态测试是通过运行程序来发现软件系统中的问题。这种测试是在程序运行过程中将缺陷发现出来,具有动态性,所以称为动态测试。\n- 静态测试主要活动是评审，即通过对需求、设计、配置、程序和其他各类文档的审查来检验相应内容是否满足用户的需求。不需要运行程序，测试对象属于静态的。\n\n> 额外内容：\n> 黑盒测试有可能是动态测试（运行程序，看输入输出），也有可能是静态测试（不运行，只看界面） \n> 白盒测试有可能是动态测试（运行程序并分析代码结构），也有可能是静态测试（不运行程序，只静态察看代码） \n> 动态测试有可能是黑盒测试（运行，只看输入输出），也有可能是白盒测试 （运行并分析代码结构） \n> 静态测试有可能是黑盒测试（不运行，只察看界面），也有可能是白盒测试（不运行，只察看代码）\n\n## 8.驱动程序、桩程序（P85）\n\n- **驱动程序（driver )，对底层或子层模块进行(单元或集成）测试时所编制的调用被测模块的程序，用以模拟被测模块的上级模块。**驱动模块在集成测试中接受测试数据，调用被测模块,并把相关的数据传送给被测模块，然后获得测试结果。当被测模块是底层模块时，如图5-3中的模块E、F、C和G,需要创建驱动程序。\n\n- **桩程序（stub）,也有人称为存根程序，对顶层或上层模块进行测试时，所编制的替代下层模块的程序,用以模拟被测模块工作过程中所调用的模块。**桩模块相当于电路中的短路器，使上层模块不需要调用真实模块，就能获得所需要的参数、返回值等。桩模块由被测试模块调用，其内部尽量简单，例如，按照简单条件进行判断,给出返回值，使被测试模块得到它需要得到的值。当被测模块是上层模块时,如图5-3中的模块A，就需要建立桩程序。\n\n![](https://img2.imgtp.com/2024/05/10/AtaR3jre.png)\n\n## 9.单元测试中测试用例设计覆盖方法（P86）\n\n- **语句覆盖**：使得程序中每一条可执行语句至少被执行一次。\n- **分支覆盖（判定覆盖）**：使得程序中每一个分支都至少被执行一次。（要求判定表达式的值的真假分支都被执行）\n- **条件覆盖**：程序中每一个条件至少有一次被满足。（要求判定表达式的每个条件的值的真假分支都被执行）\n- **路径覆盖**：对程序模块的所有独立的基本路径至少要测试一次。\n\n> 额外内容：\n>\n> 条件覆盖跟判定覆盖的区别：\n> 举个例子：\n> 判定表达式：a > 3 and b > 0\n> 用判定覆盖设计的测试用例:\n> a: true, b: true\n> a: false,b: false\n> -> a = 5, b = 1 (判定表达式的值为“真”)\n> -> a = 0, b = 1 (判定表达式的值为“假”)\n> 注意：这里并不需要管b的取值，就已经满足判定覆盖的条件了。\n> 用条件覆盖设计的测试用例：\n> a: true, b: false\n> a: ture, b: true\n> a: alse, b: false\n> a: false, b: true\n> -> a = 5, b = 1 (条件a > 3为真， 条件b > 0为真)\n> -> a = 5, b = -1 (条件a > 3为真， 条件b > 0为假)\n> -> a = -5, b = 1 (条件a > 3为假， 条件b > 0为真)\n> -> a = -5, b = -1(条件a > 3为假， 条件b > 0为假)\n\n## 10.移动应用 APP特有的测试（P196）\n\n针对移动App应用测试,除了针对代码的单元测试、系统功能测试之外,侧重考虑下列测试。\n\n- 兼容性测试，包括硬件差异、操作系统版本等。\n- 交互性测试，不同的操作同时发生，例如微信操作时电话来了。\n- 用户体验测试，即用户易用性测试,如横竖切换、触摸、多指触摸、缩放、分页和导航等操作灵活性、局限性。\n- 耗电量测试，可以通过仪器来检测,也可以通过判断计算效率是否是最优的来进行评估。\n- **网络流量测试**，数据传输是否压缩,是否只传输必要的信息?\n- **网络连接**，在低速无线连接、不同网络间的切换情况下，软件容错性、稳定性如何?在无网络的情况下，App支持离线操作吗?\n- 性能测试，在移动设备端，主要通过内存、进程占有CPU资源等分析来完成任务。\n- 稳定性测试，移动App闪退问题比较多，如何更好地发现App应用崩溃问题？\n\n## 11.缺陷优先级（P235）\n\n- 立即解决（P1级）：缺陷导致系统几乎不能运行、使用，或者严重妨碍测试的执行，需立即修正、尽快修正\n- 高优先级（P2级）：缺陷严重，影响测试，需要优先考虑修正。例如不超过24小时修正\n- 正常排队（P3级）：缺陷需要修正，但可以正常排队等待修正\n- 低优先级（P4级）：缺陷可以在开发人有时间的时候被修正，如果没有时间，可以不修正\n\n> 额外内容：软件缺陷**严重性**\n>\n> - 0级（致命）：最严重等级,缺陷导致系统任何一个主要功能完全丧失、用户数据受到破坏、系统崩溃悬挂、死机等 \n> - 1级（严重）：系统的主要功能部分丧失，数据不能完整保存，系统的次要功能完全丧失，系统所提供的功能或服务受到明显的影响\n> - 2级（一般）：系统的次要功能没有完全实现，但不影响用户的正常使用。例如提示信息不太准确;或用户界面差、操作时间稍长等问题\n> - 3级（较小）：操作者不方便或遇到麻烦，但不影响功能的操作和执行,如字体不美观、按钮大小不是很合适、文字排列不对齐等一些小问题\n\n## 12.缺陷分析的方法（P242）\n\n从缺陷的层次看，可以分为：\n\n- 宏观分析：根据缺陷的总体数据分析，可以了解整体的测试效率、开发人员修正缺陷的效率、测试是否能达到预期的目标。 \n- 微观分析：发现测试的漏洞，评估具体模块的代码质量以及具体缺陷描述中所存在的问题。\n\n> 额外内容：最常用的缺陷分析方法有4种，分别是**缺陷分布报告、缺陷趋势报告、缺陷年龄报告、测试结果进度报告**。\n\n## 13.软件缺陷的生命周期（P239）\n\n![](https://img2.imgtp.com/2024/05/06/iVxh2EVm.png)\n\n简化：打开->修正->关闭\n\n## 14.测试风险分类（P267）\n\n测试风险很多，但可以分为两类——**测试对象剖面的风险**和**测试操作剖面的风险**。\n（1）测试对象剖面的风险，即测试对象比较复杂，测试的广度和深度都不够。例如，系统所涉及的业务处理复杂、测试范围没有说明清楚、用户的各种使用场景(scenario)未被捕捉到、某些例外的测试用例没有想到等。\n（2）测试操作剖面的风险，主要指测试操作过程中存在的各种风险，例如测试环境和真实运行环境差异较大、测试流程不够完善导致测试执行难以控制、回归测试中以风险换时间的策略等。\n\n>额外内容：\n>![](https://img2.imgtp.com/2024/05/07/59AL8CEr.png)\n\n\n## 15.测试分析与设计的目标（P40）\n\n目标就是解决“测什么”、“如何测”这两个基本问题，也会引出“什么是测试用例”、“什么是测试脚本”等基本问题。\n\n## 16.集成测试策略（P97）\n\n- 自顶向下集成策略：从主控模块开始，沿着软件的控制层次向下移动，从而逐渐把各个模块结合起来。在组装过程中，可以使用深度优先或宽度优先的策略。\n- 自底向上集成策略：从底层模块开始（即在软件结构最底层的模块）开始，向上推进，不 断进行集成测试的方法。 \n- 混合策略：对软件结构中较上层，使用的是\"自顶向下\"法；对软件结构中较下层，使用 的是\"自底向上\"法，两者相结合。\n\n## 17.负载测试，压力测试，性能测试（P157）\n\n- **负载测试是通过模拟实际软件系统所承受的负载条件、改变系统负载大小和负载方式来发现系统中所存在的问题。**例如，逐渐增加模拟用户的数量来观察系统的响应时间和数据吞吐量、系统占用的资源（如CPU、内存）等，以检验系统的行为和特性，发现系统可能存在的性能瓶颈、内存泄漏、不能实时回步寺问题。贝我测A文地以为性能测试、压力测试所采用。\n- **压力测试是在强负载情况下（如大数据量、大量并发用户连接等）对稳定性进行测试，查看应用系统在峰值（瞬间使用高峰)使用情况下的行为表现;更有效地发现系统稳定性的隐患和系统在负载峰值的条件下功能隐患等，确认系统是否具有良好的容错能力和可恢复能力。**压力测试分为高负载下的长时间（如24小时以上)的稳定性压力测试和极限负载情况下导致系统崩溃的破坏性压力测试。\n- **性能测试是为获取或验证系统性能指标而进行的测试。**性能测试，目的明确，事先有明确的性能指标，并要求在严格的测试环境和所定义的测试负载情况下进行,获得在不同的负载情况下的性能指标数据。性能测试使用负载测试的技术、工具以及用不同的负载水平来度量性能指标和建立性能基准。\n\n## 18.测试用例的元素（P47）\n\n**5W1H**\n\n- Why\n- What\n- Where\n- When\n- Which\n- How\n\n> 没有Who\n\n![](https://img2.imgtp.com/2024/05/11/aYmCiie1.png)\n\n## 19.功能测试用例的设计方法（P120）\n\n- 等价类划分法\n  - 有效等价类16-40，无效等价类>40,<16\n  - 使用该方法设计测试用例的步骤：（1）数据分类，分出有效等价类和无效等价类（2）针对有效等价类，进一步进行分割，直到不能划分为止，形成等价类表，为每一等价类规定一个唯一的编号（3）就每一个具体的等价类，设计一个测试用例，直到所有有效等价类均被测试用例所覆盖（4）对无效等价类进行相同的处理\n- 边界值分析法\n- 循环结构测试的综合方法\n- 因果图法\n- 决策表方法\n- 功能图法\n- 正交试验设计方法\n\n> 额外内容：\n> 黑盒测试方法（blake-box testing)，是把程序看作一个不能打开的黑盒子，如图5-1所示，不考虑程序内部结构和内部特性，而是考察数据的输入、条件限制和数据输出，完成测试。\n> 白盒测试方法（ white-box testing )，也称结构测试或逻辑驱动测试。白盒测试方法是根据模块内部结构了解，基于内部逻辑结构，针对程序语句、路径、变量状态等来进行测试，如图5-2所示，检验程序中的各个分支条件是否得到满足，每条执行路径是否按预定要求正确地工作\n>\n> ---\n>\n> 黑盒测试方法的具体方法：等价类划分方法、边界值分析、因果分析、决策表方法、正交实验设计方法等。----> ## 19.功能测试用例的设计方法\n> 白盒测试的主要方法：逻辑覆盖、分支覆盖、条件组合覆盖、基本路径测试等。----> ## 9.单元测试中测试用例设计覆盖方法\n\n## 20.设计评审的难点（作业题）\n\n设计评审的难点主要集中在以下几个方面：\n（1）设计目标的理解：设计评审需要确保设计符合规定的目标，但有时设计者可能对目标理解不透彻，导致设计方案与实际需求不符。\n（2）设计方案的选择：在设计评审中，需要从多个设计方案中选择最优的方案，但有时设计者可能无法准确评估各个方案的优缺点，导致选择不当。\n（3）设计的实际可行性：设计评审需要评估设计的适宜性、充分性、有效性和效率，但有时设计者可能无法预测设计在实际应用中的表现，导致方案不可行。\n（4）设计的可持续性：设计评审需要考虑设计对环境、资源和经济的影响，但有时设计者可能只关注当前的需求，而忽视了设计的长期影响。\n（5）设计的创新性：设计评审需要鼓励创新的设计思路，但有时设计者可能过于追求创新，而忽视了设计的实际性和可用性。\n   因此，设计评审需要综合考虑以上难点，确保设计方案符合实际需求，具备可持续性和创新性，同时满足规定的目标。\n\n## 21.软件测试的目的（P255）\n\n在开发周期内，尽可能早地发现最严重的缺陷\n\n> 额外内容：\n> 测试目的:（1）证明：获取系统在可接受风险范围内可用的信心;尝试在非正常情况和条件下的功能和特性;保证一个工作产品是完整的并且可用或可被集成。（2）检测：发现缺陷、错误和系统不足;定义系统的能力和局限性;提供组件、工作产品和系统的质量信息。(3）预防：澄清系统的规格和性能;提供预防或减少可能制造错误的信息;在过程中尽早检测错误;确认问题和风险，并且提前确认解决这些问题和风险的途径。\n\n## 22.测试最低目标，基本目标（P255）\n\n- 最低目的：正常的输入+正常的处理过程，有一个正确的输出\n- 基本目的：对异常的输入有错误的捕获，并进行相应提示或者屏蔽\n\n> 额外内容：\n> 较高目的：对隐式需求进行测试\n\n## 23.软件质量概念\n\n概括地说，软件质量就是“软件与明确地和隐含地定义的需求相一致的程度”。更具体地说，软件质量是软件与明确地叙述的功能和性能需求、文档中明确描述的开发标准以及任何专业开发的软件产品都应该具有的隐含特征相一致的程度。从管理角度对软件质量进行度量，可将影响软件质量的主要因素划分为三组，分别反应用户在使用软件产品时的三种不同倾向或观点：产品运行(正确性、健壮性、效率、完整性、可用性、风险);产品修改(可理解性、可维修性、灵活性、可测试性);产品转移(可移植性、可再用性、互运行性)。\n\n> 软件质量特性是指软件的功能性、可靠性、易用性、效率、可维护性、可移植性  \n\n## 24.软件测试中的V&V模型（P8）\n\n软件测试中的V&V模型分别代表**验证**和**有效性确认**\n\n验证：是否正确地构造了软件？即是否正确地做事，验证开发过程是否遵守已定义好的内容。验证产品满足规格设计说明书的一致性。\n\n有效性确认：是否构造了正是用户所需要的软件？即是否正在做正确的事。验证产品所实现的功能是否满足用户的需求。\n\n## 25.向前兼容，向后兼容（P182）\n\n- 向后兼容是指新发布的软件版本可以使用该软件的以前版本所产生的数据;\n- 向前兼容是指在设计和开发软件一个新版本时，考虑如何和未来版本的数据兼容。\n\n> 额外内容：\n> 数据向后兼容测试是必不可少的，而数据向前兼容测试是可选的，一般是不需要的\n\n## 26.自动化测试的五种技术原理（P65）\n\n- 代码分析  \n- GUI 对象识别  \n- DOM 对象识别  \n- 自动比较技术  \n- 脚本技术 \n\n## 27.软件测试的原则（P250）\n\n- 尽早和不断地测试\n- 重点测试\n- 测试阶段性\n- 测试独立性\n- 测试客观性\n- 计划是一个过程\n- 测试开发的一部分\n- 发现缺陷更多的地方，其风险越大\n- 想用户所想\n\n## 28.软件测试中控制风险的对策（P268）\n\n- 消除执行风险：通过系统复审、测试人员之间互审、测试人员在不同的测试模块上相互调换、自动化测试和抽查等方法,及时发现问题，并产生震慑作用，确保测试用例被100%执行。\n- 降低进度风险：进行测试资源、时间等估算时,要留有余地,增加10%的空间，以降低测试资源可能不足的风险。\n- 减少人员风险：对每个关键性技术人员培养后备人员，做好不同领域知识的培训，从而确保人员一旦离开公司,项目不会受到严重影响。\n\n## 29.因果图\n\n一个程序规格说明要求如下：输入第一个字符必须是 # 或 * ,第二个字符必须是一个数字，在此情况可对文件修改；若第一个字符非 # 或 * ,则程序给出信息N，若第二个字符非数字，则程序给出信息M，试用因果图法设计该程序测试用例。\n\n![write by LiZhengXue](https://img2.imgtp.com/2024/05/14/5JfXIPV7.png)\n","title":" 软件测试资料\n","category":[" 软件工程\n"],"date":" 2024-05-07\n","author":" Jixer\n","source":" 原创\n\n"}}